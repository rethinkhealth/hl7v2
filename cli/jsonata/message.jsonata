(
  /* Check if property exist in the tree */
  $checkExist := function($p) {(
    $exists($$.`xsd:schema`.`xsd:complexType`[`@_name`= $p & ".CONTENT"])
  )};

  /* Reformat property name */
  $formatProperty := function($name) {(
    $checkExist($name) ? $split($name, ".")[1] : $name
  )};

  $formatSegment := function($segment) {(
    {
      "$ref": $checkExist($segment.`@_ref`) ? 
      /* Schema is a child in the current schema */
      "/schemas/" & $formatProperty($segment.`@_ref`) :
      /* Schema is in the segments schema */
      "segments.schema.json#/definitions/" & $formatProperty($segment.`@_ref`)
    }
  )};

  $formatMedatata := function($u) {(
    {
      "minOccurs": $u.`@_minOccurs`,
      "maxOccurs": $u.`@_maxOccurs`,
      "optionality": $u.`@_minOccurs` = '0' ? "Optional" : "Required",
      "repeatability": $u.`@_maxOccurs` = '1' ? "Unique" : "Multiple"
    }
  )};

  /* Retrieve properties */
  $getProperties := function($x) {(
    $$.`xsd:schema`.`xsd:complexType`[`@_name`= $x & ".CONTENT"].`xsd:sequence`.`xsd:element`@$e{
      $formatProperty($e.`@_ref`):
        $merge([$e.`@_maxOccurs` = "1" ? $formatSegment($e) : {
          "anyOf": [
            $formatSegment($e),
            {
              "type": "array",
              "items": $formatSegment($e)
            }
          ]
        },
        {"metadata": $formatMedatata($e)}])
    }
  )};
  
  /* CONSTRUCTING THE ROOT OBJECT */
  $.`xsd:schema`.`xsd:element`@$r[$not($contains($r.`@_name`, "."))].(
    {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "$id": "https://www.rethinkhealth.io/schemas/" & $r.`@_name` & ".schema.json",
      "title": "HL7v2 " & $r.`@_name`,
      "type": "object",
      "description": "JSON Schema definition for HL7v2",
      "properties": $getProperties($r.`@_name`),
      "required": [
          $$.`xsd:schema`.`xsd:complexType`[`@_name`=$r.`@_type`].`xsd:sequence`.`xsd:element`[`@_minOccurs` = "1"].$formatProperty(`@_ref`)
      ],
      /* CONSTRUCTING CHILD REFERENCES */
      "$defs": $$.`xsd:schema`.`xsd:element`@$d[$contains($d.`@_name`, ".")] ? $$.`xsd:schema`.`xsd:element`@$d[$contains($d.`@_name`, ".")]{
        $formatProperty($d.`@_name`): {
          "$id": "/schemas/" & $formatProperty($d.`@_name`),
          "$schema": "http://json-schema.org/draft-07/schema#",
          "type": "object",
          "properties": $getProperties($d.`@_name`),
          "required": [
            $$.`xsd:schema`.`xsd:complexType`[`@_name`=$d.`@_type`].`xsd:sequence`.`xsd:element`[`@_minOccurs` = "1"].$formatProperty(`@_ref`)
          ]
        }
      }
    }
  )
)